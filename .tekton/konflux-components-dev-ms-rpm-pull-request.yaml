apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  annotations:
    build.appstudio.openshift.io/repo: https://github.com/nmirasch/konflux-components-dev?rev={{revision}}
    build.appstudio.redhat.com/commit_sha: '{{revision}}'
    build.appstudio.redhat.com/pull_request_number: '{{pull_request_number}}'
    build.appstudio.redhat.com/target_branch: '{{target_branch}}'
    pipelinesascode.tekton.dev/cancel-in-progress: "true"
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/on-cel-expression: event == "pull_request" && target_branch
      == "main" && ( "rpms/microshift-gitops/***".pathChanged() || ".tekton/konflux-components-dev-ms-rpm-pull-request.yaml".pathChanged()
      )
  creationTimestamp: null
  labels:
    appstudio.openshift.io/application: test-rpms-builds
    appstudio.openshift.io/component: konflux-components-dev-ms-rpm
    pipelines.appstudio.openshift.io/type: build
  name: konflux-components-dev-ms-rpm-on-pull-request
  namespace: nmirasch-tenant
spec:
  params:
  - name: ociStorage
    value: quay.io/redhat-user-workloads/nmirasch-tenant/konflux-components-dev-ms-rpm:on-pr-{{revision}}
  - name: package-name
    value: microshift-gitops
  - name: context
    value: rpms/microshift-gitops
  - name: path-context
    value: rpms/microshift-gitops
  - name: context-path
    value: rpms/microshift-gitops
  - name: specfile
    value: microshift-gitops.spec
  - name: git-url
    value: "{{ source_url }}"
  - name: revision
    value: "{{ revision }}"
  - name: target-branch
    value: "{{ target_branch }}"
  - name: hermetic
    value: "true"
  - name: build-architectures
    value:
    - aarch64
    - x86_64
  - name: script-environment-image
    value: "quay.io/redhat-user-workloads/nmirasch-tenant/konflux-components-dev-builder@sha256:9efb61c49d241b3597c1289b42ecb5e9ba9de48126bf101c51b93bdadb1215e4"
  - name: pre-build-script-content
    value: |
      #!/usr/bin/env bash
      set -euxo pipefail
      
      echo "--- Preparing to generate spec and sources using Skopeo  ---"
      echo "--- SOURCE_ARTIFACT_URL ${SOURCE_ARTIFACT_URL}  ---"
      
      CLEAN_SOURCE_URL=${SOURCE_ARTIFACT_URL#oci:}
      URL_WITH_GIT_SUFFIX=$(echo "${CLEAN_SOURCE_URL}" | sed 's|@|.git@|')
      echo "Corrected artifact URL for inspection: ${URL_WITH_GIT_SUFFIX}"
      
      echo "Waiting for manifest to be available for ${URL_WITH_GIT_SUFFIX}..."
      
      # Retry for up to 2 minutes to solve registry race conditions
      for i in {1..12}; do
        if skopeo inspect "docker://${URL_WITH_GIT_SUFFIX}" > /dev/null; then
          echo "Manifest is now available!"
          break # Exit the loop and continue the script
        fi
        if [ "$i" -eq 12 ]; then
          echo "Error: Timed out waiting for manifest."
        exit 1
        fi
        echo "Manifest not found. Retrying in 10 seconds..."
        sleep 10
      done
      
      echo "--- Preparing to generate spec and sources using Skopeo  ---"
      
      mkdir -p original-repo
      skopeo copy "docker://${CLEAN_SOURCE_URL}" "dir:./original-repo"
      echo "Original repo extracted using Skopeo."
      
      cd original-repo
      ./generic-pre-build-script.sh
      cd ..
      echo "Generator script executed successfully."
      
      mkdir workdir
      cp original-repo/rpms/microshift-gitops/microshift-gitops.spec ./workdir/
      cp original-repo/argo-cd-sources.tar.gz ./workdir/
      
      cd workdir
      sha512sum *.tar.gz > sources
      cat sources
      cd ..
      echo "'sources' file created."
      
      MODIFIED_ARTIFACT_URL="${OCI_STORAGE_URL}.sources:pre-build-$(date +%s)"
      skopeo copy "dir:./workdir" "docker://${MODIFIED_ARTIFACT_URL}" --digestfile digest.txt
      
      REPO_URL=$(echo "${MODIFIED_ARTIFACT_URL}" | cut -d: -f1)
      NEW_DIGEST=$(cat digest.txt)
      NEW_ARTIFACT_WITH_DIGEST="${REPO_URL}@${NEW_DIGEST}"
      echo "Pushed new source artifact to: ${NEW_ARTIFACT_WITH_DIGEST}"
      
      echo -n "${NEW_ARTIFACT_WITH_DIGEST}" | tee $(results.manipulated-source-artifact.path)
  pipelineRef:
    resolver: git
    params:
    - name: url
      value: "https://github.com/nmirasch/rpmbuild-pipeline.git"
    - name: revision
      value: main
    - name: pathInRepo
      value: pipeline/build-rpm-package.yaml
  taskRunTemplate:
    serviceAccountName: build-pipeline-konflux-components-dev-ms-rpm
  workspaces:
  - name: source-workspace
    persistentVolumeClaim:
      claimName: "{{pvc_name}}"
  - name: git-auth
    secret:
      secretName: '{{ git_auth_secret }}'
  - name: registry-auth
    secret:
      secretName: nmirasch-quay
status: {}